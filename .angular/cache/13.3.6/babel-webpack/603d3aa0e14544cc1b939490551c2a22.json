{"ast":null,"code":"import _classCallCheck from \"/Users/eddylujan/Documentos/DesarrolloWeb/Red-Social/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eddylujan/Documentos/DesarrolloWeb/Red-Social/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Observable } from 'rxjs';\nimport { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { AuthenticationServiceService } from './authentication-service.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authentication-service.service\";\nexport var JwtTokenInterceptorService = /*#__PURE__*/(function () {\n  var JwtTokenInterceptorService = /*#__PURE__*/function () {\n    function JwtTokenInterceptorService(authService) {\n      _classCallCheck(this, JwtTokenInterceptorService);\n\n      this.authService = authService;\n    }\n\n    _createClass(JwtTokenInterceptorService, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var currentUser = this.authService.getIdentity();\n        var token = this.authService.getToken();\n\n        if (currentUser && token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: \"Bearer \".concat(token),\n              'Content-Type': 'application/json; charset=utf-8',\n              'Accept': 'application/json'\n            }\n          });\n        }\n\n        return next.handle(request); // return next.handle(request).pipe(\n        //   catchError((err) => {\n        //     if (err.status === 401) {\n        //       this.authService.logout();\n        //     }\n        //     const error = err.error.message || err.statusText;\n        //     return throwError(error);\n        //   })\n        // );\n      }\n    }]);\n\n    return JwtTokenInterceptorService;\n  }();\n\n  JwtTokenInterceptorService.ɵfac = function JwtTokenInterceptorService_Factory(t) {\n    return new (t || JwtTokenInterceptorService)(i0.ɵɵinject(i1.AuthenticationServiceService));\n  };\n\n  JwtTokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtTokenInterceptorService,\n    factory: JwtTokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return JwtTokenInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}